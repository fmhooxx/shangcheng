<template>
  <view class="content">
    <scroll-view scroll-y
                 class="left-aside">
      <view v-for="item in flist"
            :key="item.id"
            class="f-item b-b"
            :class="{ active: item.id === currentID }"
            @click="tabtap(item.id)">
        {{ item.name }}
      </view>
    </scroll-view>
    <scroll-view scroll-with-animation
                 scroll-y
                 class="right-aside"
                 @scroll="asideScroll"
                 :scroll-top="tabScrollTop">
      <view v-for="item in secondList"
            :key="item.id"
            class="s-list"
            :id="'main-' + item.id">
        <text class="s-item">{{ item.name }}</text>
        <view class="t-list">
          <view v-for="titem in thirdList"
                :key="titem.id"
                @click="navToList(titem.id)">
            <view v-if="titem.pid === item.id"
                  class="t-item">
              <image :src="titem.picture"></image>
              <!-- <easyLoadimage :src="titem.picture"
                             :scroll-top="scrollTop"></easyLoadimage> -->
              <text>{{ titem.name }}</text>
            </view>
          </view>
          <!-- <view v-for="titem in tlist"
                :key="titem.id">
            <view @click="navToList(item.id, titem.id)"
                  v-if="titem.pid === item.id"
                  class="t-item">
              <image :src="titem.picture"></image>
              <text>{{ titem.name }}</text>
            </view>
          </view> -->
        </view>
      </view>
    </scroll-view>
  </view>
</template>

<script>
import easyLoadimage from '../../components/easy-loadimage/easy-loadimage';
export default {
  components: {
    easyLoadimage,
  },
  data() {
    return {
      sizeCalcState: false,
      id: '',
      tabScrollTop: 0,
      // currentId: 1,
      // 一级分类
      flist: [],
      // 二级分类
      slist: [],
      // 三级分类
      tlist: [],
      // 当前选中项的 id
      currentID: null,
      // 二级分类
      secondList: [],
      // 三级分类
      thirdList: [],
      scrollTop: 0,
      arr: [],
      // 阻止点击同一个分类 
      idCopy: ''
    };
  },
  onLoad(options) {
    // this.loadData();
    // 先获取第一级
    // this.frist();
    // 获取一级分类接口\
  },
  onShow() {
    this.id = uni.getStorageSync('id')
    this.getFristClassification()
  },
  // 传入scrollTop值并触发所有easy-loadimage组件下的滚动监听事件
  onPageScroll({ scrollTop }) {
    this.scrollTop = scrollTop;
  },
  methods: {
    // 获取一级分类接口
    async getFristClassification() {
      let data = {
        action: 'GetMainTreeCategoriesList',
        TypeId: 2
      }
      let res = await this.$api.api.fristClassification(data)
      if (res.data.status) {
        var result = res.data.cateList.substr(1, res.data.cateList.length - 2)
        this.arr = eval('(' + result + ')');
        if (this.id != '') {
          this.currentID = this.id
          this.tabtap(this.currentID)
        } else {
          this.currentID = this.arr[0].id
          this.tabtap(this.currentID)
        }
        this.flist = this.arr
      }
    },
    async frist() {
      let data = {
        TypeId: 2,
        action: 'GetTreeCategoriesList',
      };
      let res = await this.$api.api.frist(data);
      if (res.data.status == true) {
        let data = res.data.cateList
        var obj = eval('(' + data + ')');
        obj.forEach((item) => {
          if (!item.pid) {
            this.flist.push(item); //pid为父级id, 没有pid或者pid=0是一级分类
          } else if (!item.picture) {
            this.slist.push(item); //没有图的是2级分类
          } else {
            item.picture = this.$config.domain.api + item.picture
            this.tlist.push(item); //3级分类
          }
        });
      }
      // if (res.data.status == true) {
      //   let first = [];
      //   res.data.Data.forEach((item, index) => {
      //     let obj = {};
      //     obj.id = item.CategoryId;
      //     obj.name = item.Name;
      //     first.push(obj);
      //   });
      //   this.flist = first;
      //   console.log(this.flist);
      // }
    },
    // async loadData() {
    //   let list = await this.$api.json.cateList;
    //   list.forEach((item) => {
    //     if (!item.pid) {
    //       this.flist.push(item); //pid为父级id, 没有pid或者pid=0是一级分类
    //     } else if (!item.picture) {
    //       this.slist.push(item); //没有图的是2级分类
    //     } else {
    //       this.tlist.push(item); //3级分类
    //     }
    //   });
    // },
    //一级分类点击
    async tabtap(id, currentID) {
      // 阻止重复点击同一个分类
      if (this.idCopy == id) {
        return
      }
      this.idCopy = id
      if (id == undefined) {
        this.currentID = currentID
      }
      if (currentID == undefined) {
        this.currentID = id
      }
      uni.setStorageSync('id', id);
      this.currentID = id
      this.secondList = []
      this.thirdList = []
      let data = {
        action: 'GetSubTreeCategoriesList',
        TypeId: 2,
        ParentId: this.currentID
      }
      let res = await this.$api.api.remainingClassification(data)
      if (res.data.status == true) {
        var result = res.data.cateList.substr(1, res.data.cateList.length - 2)
        var arr = eval('(' + result + ')');
        arr.forEach(item => {
          if (!item.picture) {
            this.secondList.push(item)
          } else if (item.picture) {
            if (item.picture) {
              item.picture = this.$config.domain.api + item.picture
              this.thirdList.push(item)
            }
          }
        })
      }
      // if (!this.sizeCalcState) {
      //   this.calcSize();
      // }

      // this.currentId = item.id;
      // let index = this.slist.findIndex((sitem) => sitem.pid === item.id);
      // this.tabScrollTop = this.slist[index].top;
    },
    //右侧栏滚动
    asideScroll(e) {
      if (!this.sizeCalcState) {
        this.calcSize();
      }
      let scrollTop = e.detail.scrollTop;
      // console.log(this.secondList)
      let tabs = this.secondList.filter((item) => item.top <= scrollTop).reverse();
      // console.log(tabs)
      if (tabs.length > 0) {
        this.currentID = tabs[0].pid;
      }
    },
    //计算右侧栏每个tab的高度等信息
    calcSize() {
      let h = 0;
      this.secondList.forEach((item) => {
        let view = uni.createSelectorQuery().select('#main-' + item.id);
        view
          .fields(
            {
              size: true,
            },
            (data) => {
              item.top = h;
              h += data.height;
              item.bottom = h;
            }
          )
          .exec();
      });
      this.sizeCalcState = true;
    },
    navToList(categoryIds) {
      uni.navigateTo({
        url: `/pages/product/list?categoryIds=${categoryIds}`,
      });
    },
  },
};
</script>

<style lang="scss">
page,
.content {
  height: 100%;
  background-color: #f8f8f8;
}

.content {
  display: flex;
}
.left-aside {
  flex-shrink: 0;
  width: 200upx;
  height: 100%;
  background-color: #fff;
}
.f-item {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100upx;
  font-size: 28upx;
  color: $font-color-base;
  position: relative;
  &.active {
    color: #323f6c;
    background: #f8f8f8;
    &:before {
      content: "";
      position: absolute;
      left: 0;
      top: 50%;
      transform: translateY(-50%);
      height: 36upx;
      width: 8upx;
      background-color: #323f6c;
      border-radius: 0 4px 4px 0;
      opacity: 0.8;
    }
  }
}

.right-aside {
  flex: 1;
  overflow: hidden;
  padding-left: 20upx;
}
.s-item {
  display: flex;
  align-items: center;
  height: 70upx;
  padding-top: 8upx;
  font-size: 28upx;
  color: $font-color-dark;
}
.t-list {
  display: flex;
  flex-wrap: wrap;
  width: 100%;
  background: #fff;
  padding-top: 12upx;
  &:after {
    content: "";
    flex: 99;
    height: 0;
  }
}
.t-item {
  flex-shrink: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  width: 176upx;
  font-size: 26upx;
  color: #666;
  padding-bottom: 20upx;

  image {
    width: 140upx;
    height: 140upx;
  }
}
/deep/.easy-loadimage {
  width: 140rpx;
  height: 140rpx;
}
</style>
